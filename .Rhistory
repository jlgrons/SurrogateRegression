# maxit=100;
# eps=1e-6;
# report=T;
fit.serxp = SERXP(Beta.hat=Data$SumStats$Beta.hat,XtX=Data$SumStats$XtX);
# Check alpha
cat("True activations:\n");
show(Data$Activations);
cat("Posterior activations:\n");
show(round(fit.serxp$Activations,digits=2));
# Check gamma
cat("True configuration:\n");
show(Data$Gamma);
cat("Posterior configuration:\n");
show(round(exp(fit.serxp$gamma.log.post),digits=2));
# Check regression coefficient
cat("True regression coefficient:\n");
show(round(Data$Regression,digits=2));
cat("Posterior expectation of regression coefficients:\n");
show(round(fit.serxp$b.M1.post,digits=2));
########################
# Parameters
########################
set.seed(2001);
Params = list();
# Populations
Params$K = 3;
Params$M = 2^Params$K;
# Sample size
Params$N = rep(1e3,Params$K);
# Snps in region
Params$J = 5;
# Single effects
Params$L = 2;
# Prior causal probability
Params$pi = rep(1,Params$J)/Params$J;
# Prior activities
Params$phi = rep(1,Params$M)/Params$M;
# Effect size covariance
Params$Sigma = array(data=NA,dim=c(Params$K,Params$K,Params$L));
for(l in 1:Params$L){
# Exchangeable correlation structure
r = 0.5;
R = r*diag(Params$K)+(1-r)*array(data=1,dim=c(Params$K,Params$K));
Params$Sigma[,,l] = R;
}
# Residual variance
Params$resid.var = 1;
rm(l,r,R);
########################
# Generate Data
########################
# Data = genData(N=Params$N,J=Params$J,K=Params$K,L=Params$L,pi=Params$pi,
#                phi=Params$phi,Sigma=Params$Sigma,resid.var=Params$resid.var);
########################
# Settings
#######################
# N = Params$N;
# J = Params$J;
# K = Params$K;
# L = Params$L;
#
# Beta.hat = Data$SumStats$Beta.hat;
# XtX = Data$SumStats$XtX;
# yty = Data$SumStats$yty;
# pi=NULL;
# phi=NULL;
# sigma=NULL;
# Sigma=NULL;
# resid.var=1;
# maxit=10;
# eps=1e-6;
# report=T;
########################
# Residualize beta
########################
# set.seed(2002);
# b.true = array(rnorm(n=J*K*L),dim=c(J,K,L));
#
# # Using individual-level data
# resid = function(k,l){
#   y.k = Data$Indiv$Y[[k]];
#   X.k = Data$Indiv$X[[k]];
#   Out = y.k;
#   for(l2 in 1:L){
#     if(l2==l){next}else{
#       Out=Out-X.k%*%b.true[,k,l2];
#     }
#   }
#   return(as.numeric(Out));
# }
#
# # Gold standard
# Au = array(data=NA,dim=c(J,K,L));
#
# for(l in 1:L){
#   for(k in 1:K){
#     r.kl = resid(k,l);
#     for(j in 1:J){
#       x.jk = Data$Indiv$X[[k]][,j];
#       Au[j,k,l] = sum(x.jk*r.kl)/sum(x.jk*x.jk);
#     }
#   }
# }
#
#
# # Using summary statistics
# SS = array(data=NA,dim=c(J,K,L));
# for(l in 1:L){
#   SS[,,l] = residCoef(Beta.hat=Data$SumStats$Beta.hat,
#                       XtX=Data$SumStats$XtX,l1=l,M1=b.true);
# }
#
# all.equal(Au,SS);
########################
# Expectation of the Cross Term
########################
# # Gold standard
# Au = 0;
# for(k in 1:K){
#   y.k = Data$Indiv$Y[[k]];
#   X.k = Data$Indiv$X[[k]];
#   for(l in 1:L){
#     Au = Au + as.numeric(y.k %*% X.k %*% b.true[,k,l]);
#   }
# }
#
# # Using summary statistics
# SS = 0;
# for(j in 1:J){
#   b.j = Data$SumStats$Beta.hat[j,];
#   G.jj = diag(Data$SumStats$XtX[j,j,]);
#   for(l in 1:L){
#     SS = SS + as.numeric(b.j %*% G.jj %*% b.true[j,,l]);
#   }
# }
########################
# SuSiE
########################
set.seed(2001);
Data = genData(N=Params$N,J=Params$J,K=Params$K,L=Params$L,pi=Params$pi,
phi=Params$phi,Sigma=Params$Sigma,resid.var=Params$resid.var);
fit.susiexp = SuSiEXP(Beta.hat=Data$SumStats$Beta.hat,XtX=Data$SumStats$XtX,
yty=Data$SumStats$yty,N=Params$N,
L=2,resid.var=1,maxit=10,report=T);
source('~/Documents/Lab/Packages/SusieXP/Development/SusieXP-Development.R', echo=TRUE)
set.seed(2013);
Params = list();
# Populations
Params$K = 3;
Params$M = 2^Params$K;
# Sample size
Params$N = rep(1e3,Params$K);
# Snps in region
Params$J = 5;
# Single effects
Params$L = 1;
# Prior causal probability
Params$pi = rep(1,Params$J)/Params$J;
# Prior activities
Params$phi = rep(1,Params$M)/Params$M;
# Effect size covariance
Params$Sigma = array(data=NA,dim=c(Params$K,Params$K,Params$L));
for(l in 1:Params$L){
# Exchangeable correlation structure
r = 0.5;
R = r*diag(Params$K)+(1-r)*array(data=1,dim=c(Params$K,Params$K));
Params$Sigma[,,l] = R;
}
# Residual variance
Params$resid.var = 1;
rm(l,r,R);
head(Data$N)
head(Data$Activations)
head(Data$Activations)
set.seed(2001);
Params = list();
# Populations
Params$K = 3;
Params$M = 2^Params$K;
# Sample size
Params$N = rep(1e3,Params$K);
# Snps in region
Params$J = 5;
# Single effects
Params$L = 2;
# Prior causal probability
Params$pi = rep(1,Params$J)/Params$J;
# Prior activities
Params$phi = rep(1,Params$M)/Params$M;
# Effect size covariance
Params$Sigma = array(data=NA,dim=c(Params$K,Params$K,Params$L));
for(l in 1:Params$L){
# Exchangeable correlation structure
r = 0.5;
R = r*diag(Params$K)+(1-r)*array(data=1,dim=c(Params$K,Params$K));
Params$Sigma[,,l] = R;
}
# Residual variance
Params$resid.var = 1;
rm(l,r,R);
set.seed(2001);
Data = genData(N=Params$N,J=Params$J,K=Params$K,L=Params$L,pi=Params$pi,
phi=Params$phi,Sigma=Params$Sigma,resid.var=Params$resid.var);
head(Data$Activations)
Data$Activations
Data$Beta
Data$Gamma
Data$Regression
fit.susiexp = SuSiEXP(Beta.hat=Data$SumStats$Beta.hat,XtX=Data$SumStats$XtX,
yty=Data$SumStats$yty,N=Params$N,
L=2,resid.var=1,maxit=10,report=T);
fit.susiexp
# Check alpha
cat("True activations:\n");
show(Data$Activations);
cat("Posterior activations:\n");
show(round(fit.susiexp$Activations,digits=2));
# Check gamma
cat("True configuration:\n");
show(Data$Gamma);
cat("Posterior configuration:\n");
show(round(exp(fit.susiexp$gamma.log.post),digits=2));
# Check moments
cat("True regression coefficient:\n");
show(round(Data$Regression,digits=2));
cat("Posterior expectation of regression coefficients:\n");
show(round(fit.susiexp$b.M1.post,digits=2));
library(data.table);
#library(mvnfast);
#library(MatrixOps);
library(SusieXP);
set.seed(2013);
Params = list();
# Populations
Params$K = 2;
Params$M = 2^Params$K;
# Sample size
Params$N = rep(1e3,Params$K);
# Snps in region
Params$J = 5;
# Single effects
Params$L = 1;
# Prior causal probability
Params$pi = rep(1,Params$J)/Params$J;
# Prior activities
Params$phi = rep(1,Params$M)/Params$M;
# Effect size covariance
Params$Sigma = array(data=NA,dim=c(Params$K,Params$K,Params$L));
for(l in 1:Params$L){
# Exchangeable correlation structure
r = 0.5;
R = r*diag(Params$K)+(1-r)*array(data=1,dim=c(Params$K,Params$K));
Params$Sigma[,,l] = R;
}
# Residual variance
Params$resid.var = 1;
rm(l,r,R);
Data = genData(N=Params$N,J=Params$J,K=Params$K,L=Params$L,pi=Params$pi,
phi=Params$phi,Sigma=Params$Sigma,resid.var=Params$resid.var);
fit.serxp = SERXP(B=Data$SumStats$B,XtX=Data$SumStats$XtX);
fit.serxp
library(devtools)
install_github(repo="zrmacc/SusieXP")
library(data.table);
#library(mvnfast);
#library(MatrixOps);
library(SusieXP);
########################
# Parameters
########################
set.seed(2013);
Params = list();
# Populations
Params$K = 2;
Params$M = 2^Params$K;
# Sample size
Params$N = rep(1e3,Params$K);
# Snps in region
Params$J = 5;
# Single effects
Params$L = 1;
# Prior causal probability
Params$pi = rep(1,Params$J)/Params$J;
# Prior activities
Params$phi = rep(1,Params$M)/Params$M;
# Effect size covariance
Params$Sigma = array(data=NA,dim=c(Params$K,Params$K,Params$L));
for(l in 1:Params$L){
# Exchangeable correlation structure
r = 0.5;
R = r*diag(Params$K)+(1-r)*array(data=1,dim=c(Params$K,Params$K));
Params$Sigma[,,l] = R;
}
# Residual variance
Params$resid.var = 1;
rm(l,r,R);
########################
# Generate Data
########################
Data = genData(N=Params$N,J=Params$J,K=Params$K,L=Params$L,pi=Params$pi,
phi=Params$phi,Sigma=Params$Sigma,resid.var=Params$resid.var);
########################
# Single effects regression
#######################
fit.serxp = SERXP(B=Data$SumStats$B,XtX=Data$SumStats$XtX);
set.seed(2001);
Params = list();
# Populations
Params$K = 2;
Params$M = 2^Params$K;
# Sample size
Params$N = rep(1e3,Params$K);
# Snps in region
Params$J = 500;
# Single effects
Params$L = 2;
# Prior causal probability
Params$pi = rep(1,Params$J)/Params$J;
# Prior activities
Params$phi = rep(1,Params$M)/Params$M;
# Effect size covariance
Params$Sigma = array(data=NA,dim=c(Params$K,Params$K,Params$L));
for(l in 1:Params$L){
# Exchangeable correlation structure
r = 0.5;
R = r*diag(Params$K)+(1-r)*array(data=1,dim=c(Params$K,Params$K));
Params$Sigma[,,l] = R;
}
# Residual variance
Params$resid.var = 1;
rm(l,r,R);
#
# phi=NULL;
# pi=NULL;
# S=NULL;
# Sigma=NULL;
# v=1;
# maxit=10;
# eps=1e-6;
# report=T;
#
set.seed(2001);
Data = genData(N=Params$N,J=Params$J,K=Params$K,L=Params$L,pi=Params$pi,
phi=Params$phi,Sigma=Params$Sigma,resid.var=Params$resid.var);
fit.susiexp = SuSiEXP(B=Data$SumStats$B,XtX=Data$SumStats$XtX,
yty=Data$SumStats$yty,N=Params$N,
L=2,v=1,maxit=10,report=T);
set.seed(2001);
Params = list();
# Populations
Params$K = 2;
Params$M = 2^Params$K;
# Sample size
Params$N = rep(1e3,Params$K);
# Snps in region
Params$J = 1000;
# Single effects
Params$L = 2;
# Prior causal probability
Params$pi = rep(1,Params$J)/Params$J;
# Prior activities
Params$phi = rep(1,Params$M)/Params$M;
# Effect size covariance
Params$Sigma = array(data=NA,dim=c(Params$K,Params$K,Params$L));
for(l in 1:Params$L){
# Exchangeable correlation structure
r = 0.5;
R = r*diag(Params$K)+(1-r)*array(data=1,dim=c(Params$K,Params$K));
Params$Sigma[,,l] = R;
}
# Residual variance
Params$resid.var = 1;
rm(l,r,R);
fit.serxp = SERXP(B=Data$SumStats$B,XtX=Data$SumStats$XtX);
microbenchmark::microbenchmark(SERXP(B=Data$SumStats$B,XtX=Data$SumStats$XtX),times=5)
set.seed(2013);
Params = list();
# Populations
Params$K = 2;
Params$M = 2^Params$K;
# Sample size
Params$N = rep(1e5,Params$K);
# Snps in region
Params$J = 1e3;
# Single effects
Params$L = 1;
# Prior causal probability
Params$pi = rep(1,Params$J)/Params$J;
# Prior activities
Params$phi = rep(1,Params$M)/Params$M;
# Effect size covariance
Params$Sigma = array(data=NA,dim=c(Params$K,Params$K,Params$L));
for(l in 1:Params$L){
# Exchangeable correlation structure
r = 0.5;
R = r*diag(Params$K)+(1-r)*array(data=1,dim=c(Params$K,Params$K));
Params$Sigma[,,l] = R;
}
# Residual variance
Params$resid.var = 1;
rm(l,r,R);
########################
# Generate Data
########################
Data = genData(N=Params$N,J=Params$J,K=Params$K,L=Params$L,pi=Params$pi,
phi=Params$phi,Sigma=Params$Sigma,resid.var=Params$resid.var);
########################
# Single effects regression
#######################
fit.serxp = SERXP(B=Data$SumStats$B,XtX=Data$SumStats$XtX);
microbenchmark::microbenchmark(SERXP(B=Data$SumStats$B,XtX=Data$SumStats$XtX),times=5)
set.seed(2013);
Params = list();
# Populations
Params$K = 2;
Params$M = 2^Params$K;
# Sample size
Params$N = rep(1e3,Params$K);
# Snps in region
Params$J = 1e3;
# Single effects
Params$L = 1;
# Prior causal probability
Params$pi = rep(1,Params$J)/Params$J;
# Prior activities
Params$phi = rep(1,Params$M)/Params$M;
# Effect size covariance
Params$Sigma = array(data=NA,dim=c(Params$K,Params$K,Params$L));
for(l in 1:Params$L){
# Exchangeable correlation structure
r = 0.5;
R = r*diag(Params$K)+(1-r)*array(data=1,dim=c(Params$K,Params$K));
Params$Sigma[,,l] = R;
}
# Residual variance
Params$resid.var = 1;
rm(l,r,R);
########################
# Generate Data
########################
Data = genData(N=Params$N,J=Params$J,K=Params$K,L=Params$L,pi=Params$pi,
phi=Params$phi,Sigma=Params$Sigma,resid.var=Params$resid.var);
microbenchmark::microbenchmark(SERXP(B=Data$SumStats$B,XtX=Data$SumStats$XtX),times=5)
set.seed(2013);
Params = list();
# Populations
Params$K = 2;
Params$M = 2^Params$K;
# Sample size
Params$N = rep(500,Params$K);
# Snps in region
Params$J = 1e3;
# Single effects
Params$L = 1;
# Prior causal probability
Params$pi = rep(1,Params$J)/Params$J;
# Prior activities
Params$phi = rep(1,Params$M)/Params$M;
# Effect size covariance
Params$Sigma = array(data=NA,dim=c(Params$K,Params$K,Params$L));
for(l in 1:Params$L){
# Exchangeable correlation structure
r = 0.5;
R = r*diag(Params$K)+(1-r)*array(data=1,dim=c(Params$K,Params$K));
Params$Sigma[,,l] = R;
}
# Residual variance
Params$resid.var = 1;
rm(l,r,R);
########################
# Generate Data
########################
Data = genData(N=Params$N,J=Params$J,K=Params$K,L=Params$L,pi=Params$pi,
phi=Params$phi,Sigma=Params$Sigma,resid.var=Params$resid.var);
fit.serxp = SERXP(B=Data$SumStats$B,XtX=Data$SumStats$XtX);
microbenchmark::microbenchmark(SERXP(B=Data$SumStats$B,XtX=Data$SumStats$XtX),times=5)
install.packages("RcppArmadillo")
install.packages("RcppArmadillo")
install.packages("RcppArmadillo")
# Add library path
library(devtools);
library(roxygen2);
# Creates package
# usethis::create_package("Spray");
setwd("~/Documents/Lab/Packages/Spray/Spray/");
# Generates RcppExports
# pkgbuild::compile_dll(force=T);
## Documents package
document();
# Install
setwd("..");
devtools::install(pkg="Spray",reload=T,quick=T,upgrade="never");
setwd("Spray/");
# Check package
# devtools::check();
library(Spray)
Estimation = data.table();
Estimation$Param = c("b.biv","b.uni","a","S11","S12","S22");
Estimation$N = nrow(Sim);
# Mean across simulations
Estimation$Means = apply(Sim[,c(1,4,7,9,11,13)],MARGIN=2,FUN=mean);
# Empirical variance
Estimation$Var.Empirical = apply(Sim[,c(1,4,7,9,11,13)],MARGIN=2,FUN=var);
# Model-based variance
Estimation$Var.Model = apply(Sim[,c(2,5,8,10,12,14)],MARGIN=2,FUN=function(x){mean(x^2)});
# Output
fout = paste0(Params$out,"Estimation/",Params$stem,Params$idx,".rds");
saveRDS(object=Estimation,file=fout);
rm(Estimation);
# Output stem
Params$out = "Test/";
library(Spray)
